{"name":"Pinky","body":"# Pinky\r\n\r\n<img src=\"http://70.166.17.76/~lazdnet/pinky_logo_small.png\" align=\"right\" alt=\"Pinky logo\">\r\n\r\nPinky is an extremely tiny [Promises/A+][A+ spec] implementation that passes the [Promises/A+ test suite][A+ tests].\r\n\r\nPinky is written to be very readable and easy to follow, with references to the relevant sections of the spec for each operation. As such, Pinky can be used as an academic example of a promises implementation.\r\n\r\nPinky includes a number of fully documented examples that illustrate common use cases, explain exactly what's going on, and highlight the power of promises. Several included examples can be used as independent explanations of the functionality promises can provide without any prior introduction to the concept.\r\n\r\n\r\n# API\r\n\r\nCreate a new Pinky instance with `var pinky = new Pinky()`.\r\n\r\n\r\n## Methods\r\n\r\n**pinky.fulfill(** *value* **)**\r\n\r\nWhen passed a value, the promise will be fulfilled. All onFulfilled callbacks will receive the passed value as their first argument.\r\n\r\n**pinky.reject(** *reason* **)**\r\n\r\nWhen passed a reason, the promise will be rejected. All onRejected callbacks will receive the passed error as their first argument.\r\n\r\n**pinky.then(** *onFulfilled*, *onRejected* **)**\r\n\r\nUsed to add onFulfilled and onRejected callbacks to the promise. The same method is provided as `pinky.promise.then(...)`.\r\n\r\n\r\n## Properties\r\n\r\n**pinky.promise**\r\n\r\nThe `pinky.promise` property is a \"thenable\" object that should be returned by functions that use Pinky. Instead of returning the Pinky instance itself, which would allow callers to fulfill/reject the promise, your function should `return pinky.promise` -- an object that includes the one method a promise must have: `pinky.then(...)`.\r\n\r\n\r\n# Usage\r\n\r\nPinky can be used both on the server and the client.\r\n\r\n\r\n## NodeJS\r\n\r\nFirst, install the Pinky module using `npm`. Optionally use `--save` to save Pinky as a dependency in your `package.json`:\r\n\r\n```\r\nnpm install pinky --save\r\n```\r\n\r\nNext, require Pinky:\r\n\r\n```javascript\r\nconst pinky = require('pinky');\r\n```\r\n\r\nThen, use promises in your code:\r\n\r\n```javascript\r\nvar pinky = new Pinky();\r\npinky.promise.then(function(value) { console.log('Hello '+value); });\r\npinky.fulfill('world');\r\n```\r\n\r\n\r\n## Browser\r\n\r\nFirst, include [`pinky.js`][Pinky JS] on your page:\r\n\r\n```html\r\n<script src=\"pinky.js\"></script>\r\n```\r\n\r\nThen, use it in your code:\r\n\r\n```html\r\n<script>\r\n\tvar pinky = new Pinky();\r\n\tpinky.promise.then(function(value) { alert('Hello '+value); });\r\n\tpinky.fulfill('world');\r\n</script>\r\n```\r\n\r\n\r\n# Examples\r\n\r\nExamples for NodeJS and the browser are available in the `examples/` folder.\r\n\r\nSome of the examples located in `examples/browser/` fetch files with XMLHttpRequest, and most browsers prevent local files from being fetched in this way. There are a [number of different ways][Run examples locally] to run examples locally, the most straightforward of which is to run `python -m SimpleHTTPServer` or `python -m http.server` and navigate to http://127.0.0.1:8000.\r\n\r\n\r\n### A complete example: fetching a value and handling errors\r\nThe example below simulates an asynchronous fetch of a random value with error handling and validation.\r\n\r\nThis example has the following possible outcomes:\r\n\r\n1. **Fulfilled**: The fetched value is valid.\r\n2. **Rejected**: The fetch timed out and the generated backup value is invalid.\r\n3. **Fulfilled**: The fetch timed out or the fetched value is invalid, but the generated value is valid.\r\n4. **Rejected**: The fetch timed out or the fetched value is invalid, and generated value is invalid.\r\n\r\n\r\n### fetchRandom(): a function that returns a promise\r\n\r\nThe `fetchRandom()` function simulates an asynchronous fetch and returns a promise that:\r\n* Will be rejected if the \"request\" times out\r\n* Will be fulfilled with the \"response\" if it comes back in time\r\n\r\n```javascript\r\n/**\r\n\tSimulate fetching a random number from a remote source\r\n\tTime out if the pretend remote source responds too slowly\r\n*/\r\nfunction fetchRandom() {\r\n\t// Create a Pinky instance\r\n\tvar pinky = new Pinky();\r\n\r\n\t// Let's pretend we're fetching the random number from a remote source\r\n\t// Randomly choose a \"response time\" between 0 and 100 milliseconds\r\n\tvar responseTime = Math.random()*100;\r\n\r\n\t// We'll timeout if the source takes too long and reject the promise\r\n\tvar timeoutTime = 50;\r\n\tvar timeout = setTimeout(function() {\r\n\t\tpinky.reject(new Error('Request timed out'));\r\n\t}, timeoutTime);\r\n\r\n\t// Simulate an asynchronous fetch using setTimeout\r\n\tsetTimeout(function() {\r\n\t\t// The response came back in time, clear our timeout\r\n\t\tclearTimeout(timeout);\r\n\t\r\n\t\t// Fulfill the promise with a random number when our pretend source responds\r\n\t\tpinky.fulfill(Math.random());\r\n\t}, responseTime);\r\n\r\n\t// Return the promise, which has a single method: then()\r\n\treturn pinky.promise;\r\n}\r\n```\r\n\r\n\r\n### How to *then()*: using the promise returned by fetchRandom()\r\n\r\n`fetchRandom()` is called and 3 chained `then()` calls are made, each of which returns a new promise:\r\n\r\n1. With the first call to `then()` (on the promise returned by `fetchRandom()`), we'll pass the fulfillment value on if it's \"valid\" (not greater than 0.5), or let the timeout exception bubble to the next promise's onRejected handler.\r\n2. With the second `then()` call (on the promise returned by the first `then()` call), we'll let the fulfillment value bubble to the next promise's onFulfilled handler, or we'll handle invalid value exception by attempting to generate a valid value locally, returning it if we're successful, or throwing another exception if we're not.\r\n3. With the third `then()` call (on the promise returned by the second `then()` call), we'll print the fulfillment value and its source, or we'll print an error indicating we were unable to get a valid value.\r\n\r\n```javascript\r\n// A value is \"valid\" if it is not greater than 0.5\r\nfunction isValid(value) { return !(value > 0.5); }\r\n\r\n// Call our asynchronous random number fetcher\r\nfetchRandom().then(\r\n\tfunction(value) {\r\n\t\t// In this onFulfilled handler, if the value is valid, fulfill the next promise by returning it\r\n\t\t// Or, if the value isn't valid, we'll reject the next promise by throwing an error\r\n\t\tif (!isValid(value)) {\r\n\t\t\t// Reject the next promise by throwing because the random number is too big\r\n\t\t\tvar reason = new Error('Fetched value is invalid');\r\n\t\t\treason.value = value;\r\n\t\t\tthrow reason;\r\n\t\t}\r\n\t\r\n\t\t// Fulfill the next promise by returning if the value is small enough\r\n\t\treturn {\r\n\t\t\tmethod: 'fetched',\r\n\t\t\tvalue: value\r\n\t\t};\r\n\t},\r\n\tnull // Let the rejection reason bubble to the next promise's onRejected handler\r\n)\r\n.then(\r\n\tnull, // Let the fulfillment value bubble to the next promise's onFulfilled handler\r\n\r\n\tfunction(reason) {\r\n\t\t// In this onRejected handler, if we return a value, the next promise will be fulfilled\r\n\t\t// Or, if we throw/re-throw, the next promise will be rejected\r\n\t\r\n\t\t// Fall back to generating a random number locally\r\n\t\tvar newValue = Math.random();\r\n\t\tif (isValid(newValue)) {\r\n\t\t\t// Fulfill the next promise if our locally generated value is valid\r\n\t\t\treturn {\r\n\t\t\t\tmethod: 'generated', \r\n\t\t\t\tvalue: newValue\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\t// Throw a new error, including the message from the previously thrown error\r\n\t\tvar newReason = new Error(reason.message+' and generated value is invalid');\r\n\t\tnewReason.value = {\r\n\t\t\tfetched: reason.value,\r\n\t\t\tgenerated: newValue\r\n\t\t};\r\n\t\tthrow newReason;\r\n\t}\r\n)\r\n.then(\r\n\tfunction(result) { // In this onFulfilled handler, we'll dump the value and how we got it\r\n\t\tconsole.log('Fulfilled: '+result.method+' value is valid: '+result.value, '\\n');\r\n\t},\r\n\tfunction(reason) { // In this onRejected handler, we'll dump the reason the operation failed\r\n\t\tconsole.error('Rejected: '+reason, reason.value, '\\n');\r\n\t}\r\n);\r\n```\r\n\r\n\r\n# Testing\r\n\r\nExecute the following commands to run the [Promises/A+ test suite][A+ tests]:\r\n\r\n```\r\nnpm install\r\nnpm test\r\n```\r\n\r\n\r\n# License\r\n\r\n[BSD license][], Copyright &copy; 2013 Lawrence Davis\r\n\r\n[Run examples locally]: https://github.com/mrdoob/three.js/wiki/How-to-run-things-locally\r\n[A+ spec]: http://promises-aplus.github.com/promises-spec/\r\n[A+ tests]: https://github.com/promises-aplus/promises-tests\r\n[BSD license]: https://github.com/lazd/Pinky/blob/master/LICENSE.md\r\n[Pinky JS]: https://raw.github.com/lazd/Pinky/master/pinky.js\r\n","google":"UA-37564953-1","tagline":" Pinky is an extremely tiny Promises/A+ implementation that passes the Promises/A+ test suite","note":"Don't delete this file! It's used internally to help with page regeneration."}